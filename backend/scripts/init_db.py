#!/usr/bin/env python3
"""
Script d'initialisation compl√®te de la base de donn√©es
Usage: python init_db.py [--reset] [--sample-data] [--check]
"""

import sys
import os
import argparse
import subprocess
from pathlib import Path

# Ajouter le r√©pertoire racine au path
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from sqlalchemy import text, create_engine
from app.configs.database import engine, create_tables, SessionLocal
from app.models.database import User, Car, Reservation
from app.utils.auth import get_password_hash
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def check_mysql_connection():
    """V√©rifier que MySQL est accessible"""
    try:
        # Tenter connexion MySQL root (sans base sp√©cifique)
        mysql_engine = create_engine("mysql+pymysql://root@localhost")
        with mysql_engine.connect() as conn:
            result = conn.execute(text("SELECT VERSION()"))
            version = result.scalar()
            logger.info(f"‚úÖ MySQL connect√© - Version: {version}")
            return True
    except Exception as e:
        logger.error(f"‚ùå Impossible de se connecter √† MySQL: {e}")
        logger.error("V√©rifiez que MySQL est d√©marr√© et accessible")
        return False


def run_sql_script(script_path):
    """Ex√©cuter un script SQL via mysql command line"""
    try:
        cmd = f"mysql -u root < {script_path}"
        result = subprocess.run(cmd, shell=True, check=True, capture_output=True, text=True)
        logger.info(f"‚úÖ Script ex√©cut√©: {script_path}")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution du script {script_path}")
        logger.error(f"Sortie: {e.stdout}")
        logger.error(f"Erreur: {e.stderr}")
        return False


def setup_database():
    """Setup complet de la base de donn√©es"""
    logger.info("üîß Initialisation de la base de donn√©es...")
    
    # 1. V√©rifier MySQL
    if not check_mysql_connection():
        return False
    
    # 2. Ex√©cuter le script de setup
    script_path = Path(__file__).parent / "database_setup.sql"
    if not run_sql_script(script_path):
        return False
    
    # 3. Cr√©er les tables avec SQLAlchemy
    try:
        create_tables()
        logger.info("‚úÖ Tables cr√©√©es avec SQLAlchemy")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        return False
    
    logger.info("üéâ Base de donn√©es initialis√©e avec succ√®s !")
    return True


def load_sample_data():
    """Charger les donn√©es de d√©monstration"""
    logger.info("üìä Chargement des donn√©es de d√©monstration...")
    
    script_path = Path(__file__).parent / "sample_data.sql"
    if not run_sql_script(script_path):
        return False
    
    logger.info("‚úÖ Donn√©es de d√©monstration charg√©es")
    return True


def create_admin_user():
    """Cr√©er un utilisateur admin par d√©faut"""
    db = SessionLocal()
    try:
        # V√©rifier si admin existe d√©j√†
        admin = db.query(User).filter(User.email == "admin@cardealership.com").first()
        if admin:
            logger.info("‚ÑπÔ∏è  Utilisateur admin existe d√©j√†")
            return
        
        # Cr√©er admin
        admin_user = User(
            email="admin@cardealership.com",
            password=get_password_hash("admin123"),
            nom="Administrator",
            prenom="Super",
            telephone="0123456789",
            role="vendeur",
            is_active=True
        )
        
        db.add(admin_user)
        db.commit()
        logger.info("‚úÖ Utilisateur admin cr√©√© : admin@cardealership.com / admin123")
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå Erreur lors de la cr√©ation de l'admin: {e}")
    finally:
        db.close()


def check_database_status():
    """V√©rifier l'√©tat de la base de donn√©es"""
    logger.info("üîç V√©rification de l'√©tat de la base...")
    
    try:
        db = SessionLocal()
        
        # Compter les enregistrements
        users_count = db.query(User).count()
        cars_count = db.query(Car).count()
        reservations_count = db.query(Reservation).count()
        
        logger.info(f"üìä Statistiques base de donn√©es:")
        logger.info(f"   - Utilisateurs: {users_count}")
        logger.info(f"   - Voitures: {cars_count}")
        logger.info(f"   - R√©servations: {reservations_count}")
        
        # Lister les utilisateurs
        users = db.query(User).all()
        logger.info("üë§ Utilisateurs:")
        for user in users:
            logger.info(f"   - {user.email} ({user.role})")
        
        db.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False


def reset_database():
    """Remise √† z√©ro compl√®te de la base"""
    logger.warning("‚ö†Ô∏è  ATTENTION: Cette op√©ration va SUPPRIMER toutes les donn√©es !")
    
    response = input("√ätes-vous s√ªr de vouloir continuer ? (tapez 'RESET' pour confirmer): ")
    if response != "RESET":
        logger.info("‚ùå Op√©ration annul√©e")
        return False
    
    logger.info("üóëÔ∏è  Remise √† z√©ro de la base...")
    
    # 1. Setup de base
    if not setup_database():
        return False
    
    # 2. Donn√©es de demo
    if not load_sample_data():
        return False
    
    logger.info("‚úÖ Base de donn√©es remise √† z√©ro avec succ√®s")
    return True


def main():
    parser = argparse.ArgumentParser(description="Gestion de la base de donn√©es Car Dealership")
    parser.add_argument("--reset", action="store_true", help="Remise √† z√©ro compl√®te")
    parser.add_argument("--sample-data", action="store_true", help="Charger donn√©es de d√©mo")
    parser.add_argument("--check", action="store_true", help="V√©rifier l'√©tat")
    parser.add_argument("--admin", action="store_true", help="Cr√©er utilisateur admin")
    
    args = parser.parse_args()
    
    if args.check:
        check_database_status()
    elif args.reset:
        reset_database()
    elif args.sample_data:
        load_sample_data()
    elif args.admin:
        create_admin_user()
    else:
        # Setup standard
        if setup_database():
            create_admin_user()


if __name__ == "__main__":
    main()


# # scripts/init_db.py
# """
# Script d'initialisation de la base de donn√©es
# """

# import sys
# import os
# from pathlib import Path

# # Ajouter le r√©pertoire racine au path
# root_dir = Path(__file__).parent.parent
# sys.path.insert(0, str(root_dir))

# from sqlalchemy import text
# from app.configs.database import engine, create_tables, SessionLocal
# from app.models.database import User, Car, Reservation
# from app.utils.auth import get_password_hash
# import logging

# logging.basicConfig(level=logging.INFO)
# logger = logging.getLogger(__name__)


# def init_database():
#     """
#     Initialise la base de donn√©es avec les tables et donn√©es de base
#     """
#     try:
#         logger.info("üîß Initialisation de la base de donn√©es...")
        
#         # Cr√©er les tables
#         create_tables()
#         logger.info("‚úÖ Tables cr√©√©es avec succ√®s")
        
#         # Cr√©er des donn√©es de test
#         create_sample_data()
#         logger.info("‚úÖ Donn√©es de test cr√©√©es")
        
#         logger.info("üéâ Initialisation termin√©e avec succ√®s !")
        
#     except Exception as e:
#         logger.error(f"‚ùå Erreur lors de l'initialisation: {e}")
#         raise


# def create_sample_data():
#     """
#     Cr√©e des donn√©es de test pour le d√©veloppement
#     """
#     db = SessionLocal()
#     try:
#         # V√©rifier si des donn√©es existent d√©j√†
#         if db.query(User).first():
#             logger.info("‚ÑπÔ∏è  Des donn√©es existent d√©j√†, cr√©ation ignor√©e")
#             return
        
#         # Cr√©er un vendeur de test
#         vendeur = User(
#             email="vendeur@test.com",
#             password=get_password_hash("password123"),
#             nom="Durand",
#             prenom="Jean",
#             telephone="0123456789",
#             role="vendeur",
#             is_active=True
#         )
#         db.add(vendeur)
        
#         # Cr√©er un client de test
#         client = User(
#             email="client@test.com",
#             password=get_password_hash("password123"),
#             nom="Martin",
#             prenom="Marie",
#             telephone="0987654321",
#             role="client",
#             is_active=True
#         )
#         db.add(client)
        
#         # Cr√©er quelques voitures de test
#         cars_data = [
#             {
#                 "marque": "Toyota",
#                 "modele": "Corolla",
#                 "couleur": "blanc",
#                 "motorisation": "Essence 1.2L",
#                 "prix": 22000.00,
#                 "disponibilite": "disponible",
#                 "description": "Berline compacte fiable et √©conomique",
#                 "kilometrage": 15000,
#                 "annee": 2021
#             },
#             {
#                 "marque": "BMW",
#                 "modele": "S√©rie 3",
#                 "couleur": "noir",
#                 "motorisation": "Diesel 2.0L",
#                 "prix": 35000.00,
#                 "disponibilite": "disponible",
#                 "description": "Berline premium avec finitions haut de gamme",
#                 "kilometrage": 8000,
#                 "annee": 2022
#             },
#             {
#                 "marque": "Renault",
#                 "modele": "Clio",
#                 "couleur": "rouge",
#                 "motorisation": "Essence 1.0L",
#                 "prix": 18000.00,
#                 "disponibilite": "disponible",
#                 "description": "Citadine pratique et moderne",
#                 "kilometrage": 25000,
#                 "annee": 2020
#             },
#             {
#                 "marque": "Mercedes",
#                 "modele": "Classe A",
#                 "couleur": "gris",
#                 "motorisation": "Essence 1.6L",
#                 "prix": 28000.00,
#                 "disponibilite": "loue",
#                 "description": "Compacte premium avec technologie avanc√©e",
#                 "kilometrage": 12000,
#                 "annee": 2021
#             },
#             {
#                 "marque": "Volkswagen",
#                 "modele": "Golf",
#                 "couleur": "bleu",
#                 "motorisation": "Diesel 1.6L",
#                 "prix": 24000.00,
#                 "disponibilite": "vendu",
#                 "description": "Compacte polyvalente et robuste",
#                 "kilometrage": 18000,
#                 "annee": 2020
#             }
#         ]
        
#         for car_data in cars_data:
#             car = Car(**car_data)
#             db.add(car)
        
#         db.commit()
#         logger.info("üìù Utilisateurs de test cr√©√©s:")
#         logger.info("   - Vendeur: vendeur@test.com / password123")
#         logger.info("   - Client: client@test.com / password123")
#         logger.info(f"üöó {len(cars_data)} voitures de test cr√©√©es")
        
#     except Exception as e:
#         db.rollback()
#         logger.error(f"Erreur lors de la cr√©ation des donn√©es de test: {e}")
#         raise
#     finally:
#         db.close()


# def reset_database():
#     """
#     Remet √† z√©ro la base de donn√©es (supprime toutes les donn√©es)
#     """
#     logger.warning("‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer toutes les donn√©es !")
    
#     response = input("√ätes-vous s√ªr de vouloir continuer ? (oui/non): ")
#     if response.lower() not in ["oui", "yes", "y"]:
#         logger.info("‚ùå Op√©ration annul√©e")
#         return
    
#     try:
#         from app.configs.database import drop_tables
        
#         logger.info("üóëÔ∏è  Suppression des tables...")
#         drop_tables()
        
#         logger.info("üîß Recr√©ation des tables...")
#         init_database()
        
#         logger.info("‚úÖ Base de donn√©es remise √† z√©ro avec succ√®s")
        
#     except Exception as e:
#         logger.error(f"‚ùå Erreur lors de la remise √† z√©ro: {e}")
#         raise


# def check_database_connection():
#     """
#     V√©rifie la connexion √† la base de donn√©es
#     """
#     try:
#         with engine.connect() as connection:
#             result = connection.execute(text("SELECT 1"))
#             logger.info("‚úÖ Connexion √† la base de donn√©es r√©ussie")
#             return True
#     except Exception as e:
#         logger.error(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
#         return False


# if __name__ == "__main__":
#     import argparse
    
#     parser = argparse.ArgumentParser(description="Script d'initialisation de la base de donn√©es")
#     parser.add_argument("--reset", action="store_true", help="Remet √† z√©ro la base de donn√©es")
#     parser.add_argument("--check", action="store_true", help="V√©rifie la connexion")
    
#     args = parser.parse_args()
    
#     if args.check:
#         check_database_connection()
#     elif args.reset:
#         reset_database()
#     else:
#         # V√©rifier la connexion avant l'initialisation
#         if check_database_connection():
#             init_database()
#         else:
#             sys.exit(1)