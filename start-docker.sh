#!/bin/bash

# =================================================================
# SCRIPT DE D√âMARRAGE GLOBAL - CAR DEALERSHIP (Backend + Frontend)
# =================================================================

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_header() {
    echo -e "${CYAN}$1${NC}"
}

# V√©rifier que Docker est install√©
check_docker() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©. Veuillez l'installer d'abord."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©. Veuillez l'installer d'abord."
        exit 1
    fi
    
    log_success "Docker et Docker Compose sont install√©s"
}

# V√©rifier que les fichiers n√©cessaires existent
check_files() {
    local required_files=(
        "docker-compose.yml"
        "backend/Dockerfile"
        "backend/requirements.txt"
        "backend/app/main.py"
        "streamlit_app/Dockerfile"
        "streamlit_app/requirements.txt"
        "streamlit_app/app.py"
    )
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            log_error "Fichier manquant: $file"
            exit 1
        fi
    done
    
    log_success "Tous les fichiers n√©cessaires sont pr√©sents"
}

# Nettoyer les anciens conteneurs
cleanup() {
    log_info "Nettoyage des anciens conteneurs..."
    docker-compose down --remove-orphans --volumes || true
    docker system prune -f || true
    log_success "Nettoyage termin√©"
}

# Construire et d√©marrer les services
start_services() {
    log_info "Construction et d√©marrage des services..."
    
    # Construire les images
    log_info "Construction des images..."
    docker-compose build --no-cache
    
    # D√©marrer les services en arri√®re-plan
    log_info "D√©marrage des services..."
    docker-compose up -d
    
    log_success "Services d√©marr√©s"
}

# Attendre que les services soient pr√™ts
wait_for_services() {
    log_info "Attente que les services soient pr√™ts..."
    
    # Attendre MySQL
    log_info "‚è≥ Attente de MySQL..."
    max_attempts=30
    attempt=0
    while [ $attempt -lt $max_attempts ]; do
        if docker-compose exec mysql mysqladmin ping -h localhost --silent 2>/dev/null; then
            break
        fi
        sleep 2
        ((attempt++))
        echo -ne "Tentative $attempt/$max_attempts...\r"
    done
    
    if [ $attempt -eq $max_attempts ]; then
        log_error "MySQL n'a pas d√©marr√© dans les temps"
        exit 1
    fi
    log_success "MySQL est pr√™t"
    
    # Attendre l'API
    log_info "‚è≥ Attente de l'API Backend..."
    max_attempts=30
    attempt=0
    while [ $attempt -lt $max_attempts ]; do
        if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            break
        fi
        sleep 2
        ((attempt++))
        echo -ne "Tentative $attempt/$max_attempts...\r"
    done
    
    if [ $attempt -eq $max_attempts ]; then
        log_error "L'API Backend n'a pas d√©marr√© dans les temps"
        exit 1
    fi
    log_success "API Backend est pr√™te"
    
    # Attendre le Frontend
    log_info "‚è≥ Attente du Frontend Streamlit..."
    max_attempts=30
    attempt=0
    while [ $attempt -lt $max_attempts ]; do
        if curl -f http://localhost:8501/_stcore/health > /dev/null 2>&1; then
            break
        fi
        sleep 2
        ((attempt++))
        echo -ne "Tentative $attempt/$max_attempts...\r"
    done
    
    if [ $attempt -eq $max_attempts ]; then
        log_error "Le Frontend Streamlit n'a pas d√©marr√© dans les temps"
        exit 1
    fi
    log_success "Frontend Streamlit est pr√™t"
}

# Afficher les informations de connexion
show_info() {
    log_header "==============================================="
    log_header "üöó CAR DEALERSHIP - D√âPLOYEMENT TERMIN√â üöó"
    log_header "==============================================="
    echo
    log_success "üéâ Tous les services sont op√©rationnels !"
    echo
    log_info "üì± INTERFACES UTILISATEUR:"
    echo "  üåê Frontend (Streamlit): http://localhost:8501"
    echo "  üìö Documentation API: http://localhost:8000/docs"
    echo "  üîß phpMyAdmin: http://localhost:8081"
    echo
    log_info "üîó API & SERVICES:"
    echo "  üöÄ API Backend: http://localhost:8000"
    echo "  üóÑÔ∏è  MySQL: localhost:3310"
    echo "  üî¥ Redis: localhost:6379"
    echo
    log_info "üë§ COMPTES DE TEST:"
    echo "  üë®‚Äçüíº Admin: admin@cardealership.com / password123"
    echo "  üõí Vendeur: vendeur@test.com / password123"
    echo "  üë§ Client: client@test.com / password123"
    echo
    log_info "üõ†Ô∏è  COMMANDES UTILES:"
    echo "  üìã Voir les logs: docker-compose logs -f"
    echo "  üîÑ Red√©marrer: docker-compose restart"
    echo "  üõë Arr√™ter: docker-compose down"
    echo "  üêö Shell API: docker-compose exec api bash"
    echo "  üêö Shell Frontend: docker-compose exec frontend bash"
    echo "  üíæ MySQL CLI: docker-compose exec mysql mysql -u car_user -p car_dealership"
    echo
    log_header "==============================================="
}

# V√©rifier la sant√© des services
health_check() {
    log_info "üîç V√©rification de la sant√© des services..."
    echo
    
    # V√©rifier MySQL
    if docker-compose exec mysql mysqladmin ping -h localhost --silent 2>/dev/null; then
        log_success "MySQL: ‚úÖ OK"
    else
        log_error "MySQL: ‚ùå ERREUR"
    fi
    
    # V√©rifier l'API
    if curl -f http://localhost:8000/health > /dev/null 2>&1; then
        log_success "API Backend: ‚úÖ OK"
    else
        log_error "API Backend: ‚ùå ERREUR"
    fi
    
    # V√©rifier Streamlit
    if curl -f http://localhost:8501/_stcore/health > /dev/null 2>&1; then
        log_success "Frontend Streamlit: ‚úÖ OK"
    else
        log_error "Frontend Streamlit: ‚ùå ERREUR"
    fi
    
    # V√©rifier phpMyAdmin
    if curl -f http://localhost:8081 > /dev/null 2>&1; then
        log_success "phpMyAdmin: ‚úÖ OK"
    else
        log_warning "phpMyAdmin: ‚ö†Ô∏è  Probl√®me de connexion"
    fi
    
    # V√©rifier Redis
    if docker-compose exec redis redis-cli ping > /dev/null 2>&1; then
        log_success "Redis: ‚úÖ OK"
    else
        log_error "Redis: ‚ùå ERREUR"
    fi
    
    echo
}

# Ex√©cuter les tests
run_tests() {
    log_info "üß™ Ex√©cution des tests..."
    
    # Tests du backend
    log_info "Test du backend..."
    if docker-compose --profile testing run --rm test; then
        log_success "Tests backend: ‚úÖ PASS√âS"
    else
        log_error "Tests backend: ‚ùå √âCHOU√âS"
    fi
    
    # Test simple du frontend
    log_info "Test du frontend..."
    if curl -f http://localhost:8501/_stcore/health > /dev/null 2>&1; then
        log_success "Tests frontend: ‚úÖ PASS√âS"
    else
        log_error "Tests frontend: ‚ùå √âCHOU√âS"
    fi
}

# Afficher les logs
show_logs() {
    case "${2:-all}" in
        "api"|"backend")
            docker-compose logs -f api
            ;;
        "frontend"|"streamlit")
            docker-compose logs -f frontend
            ;;
        "mysql"|"db")
            docker-compose logs -f mysql
            ;;
        "redis")
            docker-compose logs -f redis
            ;;
        "all"|*)
            docker-compose logs -f
            ;;
    esac
}

# Fonction principale
main() {
    log_header "üê≥ Car Dealership - Backend + Frontend"
    echo
    
    case "${1:-start}" in
        "start")
            check_docker
            check_files
            start_services
            wait_for_services
            show_info
            ;;
        "restart")
            check_docker
            log_info "Red√©marrage des services..."
            docker-compose restart
            wait_for_services
            show_info
            ;;
        "stop")
            log_info "üõë Arr√™t des services..."
            docker-compose down
            log_success "Services arr√™t√©s"
            ;;
        "clean")
            log_warning "‚ö†Ô∏è  Cette op√©ration va supprimer tous les conteneurs et volumes"
            read -p "Continuer ? (y/N) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                cleanup
            fi
            ;;
        "logs")
            show_logs "$@"
            ;;
        "health")
            health_check
            ;;
        "test")
            run_tests
            ;;
        "shell")
            case "${2:-api}" in
                "frontend"|"streamlit")
                    docker-compose exec frontend bash
                    ;;
                "api"|"backend"|*)
                    docker-compose exec api bash
                    ;;
            esac
            ;;
        "mysql")
            docker-compose exec mysql mysql -u car_user -p car_dealership
            ;;
        "build")
            log_info "üî® Reconstruction des images..."
            docker-compose build --no-cache
            log_success "Images reconstruites"
            ;;
        *)
            echo "Usage: $0 {start|restart|stop|clean|logs|health|test|shell|mysql|build}"
            echo
            echo "üìã Commandes disponibles:"
            echo "  start    - D√©marrer tous les services"
            echo "  restart  - Red√©marrer tous les services"
            echo "  stop     - Arr√™ter tous les services"
            echo "  clean    - Nettoyer conteneurs et volumes"
            echo "  logs     - Afficher les logs [all|api|frontend|mysql|redis]"
            echo "  health   - V√©rifier la sant√© des services"
            echo "  test     - Ex√©cuter les tests"
            echo "  shell    - Ouvrir un shell [api|frontend]"
            echo "  mysql    - Ouvrir MySQL CLI"
            echo "  build    - Reconstruire les images"
            echo
            echo "üìñ Exemples:"
            echo "  $0 start                 # D√©marrer tout"
            echo "  $0 logs frontend         # Logs du frontend seulement"
            echo "  $0 shell frontend        # Shell dans le conteneur frontend"
            exit 1
            ;;
    esac
}

# Ex√©cuter la fonction principale
main "$@"